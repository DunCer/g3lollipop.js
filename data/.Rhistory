pfam_df[idx, "pfam_id"] = pfam_name
}
pfam
pofam_df
pfam_df
split(pfam_df, "uniprot")
pfam_list = split(pfam_df, "uniprot")
pfam_list
pfam_list[[1]]
pfam_list[[2]]
length(pfam_list)
length(pfam_list)[1]
length(pfam_list)
length(pfam_list) == 1
pfam_list
humanUp = UniProt.ws(taxId=9606)
cols = c("UNIPROTKB", "SEQUENCE", "LENGTH")
kt = "UNIPROTKB"
lapply(pfam_list, function(df){
search_key <- df[1, "uniprot"]
res <- select(humanUp, search_key, cols, kt)
df$len = res[1, "SEQUENCE"]
})
pfam_list
lapply(pfam_list, function(df){
search_key <- df[1, "uniprot"]
res <- select(humanUp, search_key, cols, kt)
cat(res[1, "LENGTH"])
cat("\n")
})
pfam_df
pfam_df[, -1]
pfam_df = pfam_df[, -1]
#for(idx in 1:nrow(pfam_df)){
#  search_key = pfam_df[idx, "uniprot"]
#  res = select(humanUp, search_key, cols, kt)
#  pfam_df[idx, "protein_length"] = res[1, "LENGTH"]
#  pfam_df[idx, "seq"] = res[1, "SEQUENCE"]
#}
# ========
# save as JSON
library(jsonlite)
output_list = list(symbol = hgnc_symbol, uniprot = search_key, length = uniprot_length, sequence = uniprot_seq, pfam = pfam_df)
search_key = pfam_list[[1]][1, "uniprot"]
res = select(humanUp, search_key, cols, kt)
uniprot_length = res[1, "LENGTH"]
uniprot_seq = res[1, "SEQUENCE"]
hgnc_symbol <- "braf"
# <Query  virtualSchemaName = "default" formatter = "TSV" header = "0" uniqueRows = "0" count = "" datasetConfigVersion = "0.6" >
# <Dataset name = "hsapiens_gene_ensembl" interface = "default" >
#     <Filter name = "with_pfam" excluded = "0"/>
#     <Attribute name = "ensembl_gene_id" />
#     <Attribute name = "ensembl_transcript_id" />
#     <Attribute name = "transcript_length" />
#     <Attribute name = "external_gene_name" />
#     <Attribute name = "version" />
#     <Attribute name = "hgnc_symbol" />
#     <Attribute name = "pfam" />
#     <Attribute name = "pfam_start" />
#     <Attribute name = "pfam_end" />
# </Dataset>
# </Query>
grch37 <- useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", dataset="hsapiens_gene_ensembl")
#grch38 <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
# all_filters = listFilters(grch37)
# all_attributes = listAttributes(grch37)
# filter: with_pfam
# ====
pfam_df <- getBM(
attributes = c("uniprotswissprot", "pfam", "pfam_start", "pfam_end"),
filters = c("hgnc_symbol", "with_uniprotswissprot", "with_hgnc", "with_pfam"),
values = list(hgnc_symbol, TRUE, TRUE, TRUE),
mart = grch37, uniqueRows = TRUE)
pfam_df <- pfam_df[with(pfam_df, order(pfam_start, pfam_end)),]
colnames(pfam_df) <- c("uniprot", "pfam_ac", "start", "end")
# ==============
# get pfam domain names
for(idx in 1:nrow(pfam_df)){
pfam_name <- dbGetQuery(PFAM_dbconn(), paste0("SELECT id FROM id WHERE ac = '", pfam_df[idx, "pfam_ac"], "'"))[1,1]
pfam_df[idx, "pfam_id"] <- pfam_name
}
# ==============
# split by uniprot (protein)
pfam_list = split(pfam_df, "uniprot")
# ===============
# get sequence information (protein length, sequence informatio optional)
humanUp = UniProt.ws(taxId=9606)
cols = c("UNIPROTKB", "SEQUENCE", "LENGTH")
kt = "UNIPROTKB"
# pick first uniprot, get sequence information
search_key = pfam_list[[1]][1, "uniprot"]
res = select(humanUp, search_key, cols, kt)
uniprot_length = res[1, "LENGTH"]
uniprot_seq = res[1, "SEQUENCE"]
pfam_df = pfam_df[, -1]
#for(idx in 1:nrow(pfam_df)){
#  search_key = pfam_df[idx, "uniprot"]
#  res = select(humanUp, search_key, cols, kt)
#  pfam_df[idx, "protein_length"] = res[1, "LENGTH"]
#  pfam_df[idx, "seq"] = res[1, "SEQUENCE"]
#}
# ========
# save as JSON
library(jsonlite)
output_list = list(symbol = hgnc_symbol, uniprot = search_key, length = uniprot_length, sequence = uniprot_seq, pfam = pfam_df)
output_list
output_json = toJSON(output_list, pretty = TRUE, auto_unbox = TRUE)
write(output_json, paste0(hgnc_symbol, "_pfam.json"))
library("biomaRt")
listMarts()
ensembl = useMart("ensembl")
listDatasets(ensembl)
ld <- listDatasets(ensembl)
ld$version
listAttributes(ensembl)
install.packages(c("ggthemes", "Matrix", "psych", "RSQLite", "selectr"))
install.packages(c("ggthemes", "Matrix", "psych", "RSQLite", "selectr"))
install.packages(c("ggthemes", "Matrix", "psych", "RSQLite", "selectr"))
install.packages(c("ggthemes", "Matrix", "psych", "RSQLite", "selectr"))
install.packages(c("ggthemes", "Matrix", "psych", "RSQLite", "selectr"))
install.packages(c("ggthemes", "Matrix", "psych", "RSQLite", "selectr"))
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
source("protein_domain_mapper.R")
# =========
hgnc.id <- "TP53"
# get uniprot ids
uniprot.info <- hgnc2uniprot(hgnc.id, include.seq = TRUE)
cat(uniprot.info)
source("protein_domain_mapper.R")
source("protein_domain_mapper.R")
# =========
hgnc.id <- "TP53"
# get uniprot ids
uniprot.info <- hgnc2uniprot(hgnc.id, include.seq = TRUE)
cat(uniprot.info)
setwd("~/Projects/cancer.js/lollipop/demo/data")
source("protein_domain_mapper.R")
# =========
hgnc.id <- "TP53"
# get uniprot ids
uniprot.info <- hgnc2uniprot(hgnc.id, include.seq = TRUE)
cat(uniprot.info)
uniprot.info
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.inf)
cat(hgnc.id, "maps to", num.uniprot.ids, "UniProt IDS: ",
paste(uniprot.info[, "uniprot_id"], collapse = "|"))
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.id, "maps to", num.uniprot.ids, "UniProt IDS: ",
paste(uniprot.info[, "uniprot_id"], collapse = "|"))
# ==========
hgnc.id <- "CDKN2A"
# get uniprot ids
uniprot.info <- hgnc2uniprot(hgnc.id, include.seq = TRUE)
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.id, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info[, "uniprot_id"], collapse = "|"))
uniprot.ids
uniprot.info
# get uniprot ids from local data
local.file <- get_hgnc2uniprot_from_UniProt()
get_hgnc2uniprot_from_UniProt <- function(){
# get hgnc2uniprot mapping from UniProt database and save as RDS file
#
# Returns:
#   RDS file name
library(RCurl, quietly = TRUE)
hgnc.mapping.file = getURL("https://www.genenames.org/cgi-bin/download?col=gd_hgnc_id&col=gd_app_sym&col=gd_app_name&col=gd_aliases&col=md_prot_id&status=Approved&status_opt=2&where=&order_by=gd_app_sym_sort&format=text&limit=&submit=submit",
ssl.verifyhost = FALSE,
ssl.verifypeer = FALSE)
hgnc.mapping.df = read.table(textConnection(hgnc.mapping.file),
header = TRUE,
sep = "\t",
quote = "",
check.name = FALSE,
fill = TRUE)
date.info = Sys.Date()
file.name = paste0("hgnc2uniprot_", date.info, ".rds")
saveRDS(hgnc.mapping.df, file.name)
cat("Saved HGNC-to-UniProt mappings to", file.name, "\n")
file.name
}
local.file <- get_hgnc2uniprot_from_UniProt()
uniprot.info2 <- hgnc2pfam_from_local(hgnc.symbol, )
# ==========
hgnc.id <- "CDKN2A"
hgnc2pfam_from_local <- function(local.file, hgnc.symbol, include.seq = FALSE, grch = "grch37", ...){
# get HGNC-to-Pfam mapping from local RDS file
#
# Args:
#   local.file: local RDS file
#   hgnc.symbol: HGNC symbol
#   include.seq: if return protein sequence information
#   grch: Genome Reference Consortium Human build (37 or 38), default grch37
#
# Returns:
#   A list with attributes: $hgnc_symbol, $uniprot_id, $protein_name, $length, $sequence (optional), $pfam (list)
hgnc2uniprot.df <- readRDS(local.file)
hgnc.info <- hgnc2uniprot.df[which(hgnc2uniprot.df$`Approved Symbol` == hgnc.symbol), ]
uniprot.line <- as.character(hgnc.info$`UniProt ID(supplied by UniProt)`)
# select primary uniprot id
uniprot.ids <- strsplit(uniprot.line, ", ")[[1]]
uniprot.num <- length(uniprot.ids)
output.list <- list(hgnc_symbol = as.character(hgnc.info[1, "Approved Symbol"]),
protein_name = as.character(hgnc.info[1, "Approved Name"]))
if(uniprot.num == 0){
warning(hgnc.symbol, " has no UniProt mappings (probably non-coding gene)", "\n")
} else {
uniprot.id <- uniprot.ids[1]
if(uniprot.num == 1){
cat(hgnc.symbol, " maps to UniProt id ", uniprot.id, "\n")
} else {
warning(hgnc.symbol, " has multiple UniProt mappings: ", paste(uniprot.ids, collapse = " | "), ", chose primary Uniprot ", uniprot.id, "\n")
}
uniprot.info = get_uniprot_info(uniprot.id, include.seq)
pfam.df = uniprot2pfam(uniprot.id, grch, ...)
output.list$uniprot_id = as.character(uniprot.info[1, "uniprot_id"])
if(include.seq){
output.list$sequence = uniprot.info[1, "sequence"]
}
output.list$length = as.numeric(uniprot.info[1, "length"])
output.list$pfam = pfam.df
}
output.list
}
source("protein_domain_mapper.R")
# =========
library(jsonlite, quietly = TRUE)
# =========
hgnc.symbol <- "TP53"
# get uniprot ids
uniprot.info <- hgnc2uniprot(hgnc.symbol, include.seq = TRUE)
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info[, "uniprot_id"], collapse = " | "))
# get uniprot ids from local data
# download data from UniProt
uniprot.file <- get_hgnc2uniprot_from_UniProt()
uniprot.info2 <- hgnc2pfam_from_local(hgnc.symbol, uniprot.file, include.seq = TRUE)
uniprot.info2 <- hgnc2pfam_from_local(uniprot.file, hgnc.symbol, include.seq = TRUE)
uniprot.info2
source("protein_domain_mapper.R")
# =========
library(jsonlite, quietly = TRUE)
# download lastest uniprot mapping table from UniProt
uniprot.file <- download_hgnc2uniprot_local()
download_hgnc2uniprot_local <- function(){
# get hgnc2uniprot mapping from UniProt database and save as RDS file
#
# Returns:
#   RDS file name
library(RCurl, quietly = TRUE)
hgnc.mapping.file = getURL("https://www.genenames.org/cgi-bin/download?col=gd_hgnc_id&col=gd_app_sym&col=gd_app_name&col=gd_aliases&col=md_prot_id&status=Approved&status_opt=2&where=&order_by=gd_app_sym_sort&format=text&limit=&submit=submit",
ssl.verifyhost = FALSE,
ssl.verifypeer = FALSE)
hgnc.mapping.df = read.table(textConnection(hgnc.mapping.file),
header = TRUE,
sep = "\t",
quote = "",
check.name = FALSE,
fill = TRUE)
date.info = Sys.Date()
file.name = paste0("hgnc2uniprot_", date.info, ".rds")
saveRDS(hgnc.mapping.df, file.name)
cat("Saved HGNC-to-UniProt mappings to", file.name, "\n")
file.name
}
uniprot.file
source("protein_domain_mapper.R")
# =========
library(jsonlite, quietly = TRUE)
# download lastest uniprot mapping table from UniProt
uniprot.file <- download_hgnc2uniprot_local()
rm(list = ls())
rm(list = ls())
source("protein_domain_mapper.R")
# =========
library(jsonlite, quietly = TRUE)
# download lastest uniprot mapping table from UniProt
uniprot.file <- download_hgnc2uniprot_local()
uniprot.file
# =========
hgnc.symbol <- "TP53"
# query uniprot information from HUGO symbol (thru UniProtWS)
uniprot.info <- hgnc2uniprot(hgnc.symbol, include.seq = TRUE)
uniprot.info
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info[, "uniprot_id"], collapse = " | "))
uniprot.info2 <- get_uniprot_info(uniprot.info[1, "uniprot_id"])
uniprot.info2
uniprot.info2 <- get_uniprot_info(uniprot.info[1, "uniprot_id"], include.seq = TRUE)
rm(list = ls())
source("protein_domain_mapper.R")
# =========
library(jsonlite, quietly = TRUE)
# download lastest uniprot mapping table from UniProt
uniprot.rds <- download_hgnc2uniprot_local()
# =========
hgnc.symbol <- "TP53"
# query uniprot information from HUGO symbol (thru UniProtWS)
uniprot.info <- hgnc2uniprot(hgnc.symbol, include.seq = TRUE)
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info[, "uniprot_id"], collapse = " | "))
# query uniprot information from HUGO symbol (thru local UniProt RDS)
uniprot.info2 <- hgnc2uniprot_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info2)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info2[, "uniprot_id"], collapse = " | "))
uniprot.info2
uniprot.info
list(uniprot.id)
list(uniprot.info)
rm(list = ls())
source("protein_domain_mapper.R")
# =========
library(jsonlite, quietly = TRUE)
# download lastest uniprot mapping table from UniProt
uniprot.rds <- download_hgnc2uniprot_local()
# =========
hgnc.symbol <- "TP53"
# query uniprot information from HUGO symbol
# (thru UniProtWS, protein name is redundant)
uniprot.info <- hgnc2uniprot(hgnc.symbol, include.seq = TRUE)
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info[, "uniprot_id"], collapse = " | "), "\n")
uniprot.info
uniprot.info2
# query uniprot information from HUGO symbol (thru local UniProt RDS)
uniprot.info2 <- hgnc2uniprot_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
uniprot.info2
length(uniprot.info2)
num.uniprot.ids <-length(uniprot.info2$uniprot_id)
num.uniprot.ids
num.uniprot.ids <-length(uniprot.info2$uniprot_id)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info2$uniprot_id, collapse = " | "), "\n")
uniprot.info2 <- hgnc2uniprot_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
uniprot.info2
num.uniprot.ids <-length(uniprot.info2$uniprot_id)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info2$uniprot_id, collapse = " | "), "\n")
uniprot.info
uniprot.id <- uniprot.info[1, "uniprot_id"]
uniprot.info3 <- get_uniprot_info(uniprot.id, include.seq = TRUE)
uniprot.info3
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info3)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info3$uniprot_id, collapse = " | "), "\n")
pfam.info <- hgnc2pfam(hgnc.symbol, include.seq = TRUE)
pfam.info
pfam.info2 <- uniprot2pfam(uniprot.id, include.seq = TRUE)
library(biomaRt)
pfam.info2 <- uniprot2pfam(uniprot.id, include.seq = TRUE)
pfam.info2 <- uniprot2pfam(uniprot.id)
pfam.info2
pfam.info3 <- hgnc2pfam_local(uniprot.file, hgnc.symbol, include.seq = TRUE)
pfam.info3 <- hgnc2pfam_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
pfam.info3
hgnc.symbol <- "CDKN2A"
# query uniprot information from HUGO symbol
# (thru UniProtWS, protein name may be redundant)
uniprot.info <- hgnc2uniprot(hgnc.symbol, include.seq = TRUE)
uniprot.info
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info[, "uniprot_id"], collapse = " | "), "\n")
# query uniprot information from HUGO symbol (thru local UniProt RDS)
# if HOGO symbol maps to multiple UniProt IDs, select the primary UniProt ID
# protein name is succinct
uniprot.info2 <- hgnc2uniprot_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
uniprot.info2
# count number of uniprot ids
num.uniprot.ids <- length(uniprot.info2$uniprot_id)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info2$uniprot_id, collapse = " | "), "\n")
uniprot.id <- uniprot.info[1, "uniprot_id"]
uniprot.info3 <- get_uniprot_info(uniprot.id, include.seq = TRUE)
uniprot.info3
# query UniProt information from UniProt ID (thru UniProtWS)
uniprot.id <- uniprot.info[1, "uniprot_id"]
uniprot.info3 <- get_uniprot_info(uniprot.id, include.seq = TRUE)
uniprot.info3
pfam.info <- hgnc2pfam(hgnc.symbol, include.seq = TRUE)
pfam.info
hgnc.symbol <- "CDKN2A"
# query uniprot information from HUGO symbol
# (thru UniProtWS, protein name may be redundant)
uniprot.info <- hgnc2uniprot(hgnc.symbol, include.seq = TRUE)
uniprot.info
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info[, "uniprot_id"], collapse = " | "), "\n")
# query uniprot information from HUGO symbol (thru local UniProt RDS)
# if HOGO symbol maps to multiple UniProt IDs, select the primary UniProt ID
# protein name is succinct
uniprot.info2 <- hgnc2uniprot_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
uniprot.info2
# query UniProt information from UniProt ID (thru UniProtWS)
uniprot.id <- uniprot.info[1, "uniprot_id"]
uniprot.info3 <- get_uniprot_info(uniprot.id, include.seq = TRUE)
uniprot.info3
pfam.info <- hgnc2pfam(hgnc.symbol, include.seq = TRUE)
pfam.info
source("protein_domain_mapper.R")
# query pfam information from UniProt ID
pfam.info2 <- uniprot2pfam(uniprot.id)
pfam.info2
# ================================================
# query Pfam domain information from HUGO symbol
pfam.info <- hgnc2pfam(hgnc.symbol, include.seq = TRUE)
pfam.info
pfam.info$length
source("protein_domain_mapper.R")
pfam.info <- hgnc2pfam(hgnc.symbol, include.seq = TRUE)
pfam.info
pfam.info$length
# query pfam information from UniProt ID
pfam.info2 <- uniprot2pfam(uniprot.id)
pfam.info2
pfam.info3 <- hgnc2pfam_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
pfam.info3
pfam.info
pfam.info$length
pfam.info$length =  as.numeric(pfam.info$length)
pfam.info$length
rm(list = ls())
source("protein_domain_mapper.R")
library(jsonlite, quietly = TRUE)
# download lastest uniprot mapping table from UniProt
uniprot.rds <- download_hgnc2uniprot_local()
hgnc.symbol <- "TP53"
pfam.info <- hgnc2pfam(hgnc.symbol, include.seq = TRUE)
pfam.info
rm(list = ls())
source("protein_domain_mapper.R")
# ================================================
# ================================================
library(jsonlite, quietly = TRUE)
# download lastest uniprot mapping table from UniProt
uniprot.rds <- download_hgnc2uniprot_local()
hgnc.symbol <- "CDKN2A"
# query uniprot information from HUGO symbol
# (thru UniProtWS, protein name may be redundant)
uniprot.info <- hgnc2uniprot(hgnc.symbol, include.seq = TRUE)
uniprot.info
# count number of uniprot ids
num.uniprot.ids <- nrow(uniprot.info)
cat(hgnc.symbol, "maps to", num.uniprot.ids, "UniProt IDS:",
paste(uniprot.info[, "uniprot_id"], collapse = " | "), "\n")
rm(list = ls())
source("protein_domain_mapper.R")
# ================================================
# ================================================
library(jsonlite, quietly = TRUE)
# download lastest uniprot mapping table from UniProt
uniprot.rds <- download_hgnc2uniprot_local()
hgnc.symbol <- "CDKN2A"
pfam.info <- hgnc2pfam(hgnc.symbol, include.seq = TRUE)
pfam.info
# query pfam information from UniProt ID
pfam.info2 <- uniprot2pfam(uniprot.id)
pfam.info2
hgnc.symbol <- "CDKN2A"
uniprot.info <- hgnc2uniprot(hgnc.symbol, include.seq = TRUE)
uniprot.info
uniprot.id <- uniprot.info[1, "uniprot_id"]
# protein name is succinct
uniprot.info2 <- hgnc2uniprot_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
uniprot.info2
uniprot.id <- uniprot.info2$uniprot_id
uniprot.id
pfam.info2 <- uniprot2pfam(uniprot.id)
pfam.info2
pfam.info3 <- hgnc2pfam_local(uniprot.rds, hgnc.symbol, include.seq = TRUE)
pfam.info3
?dir.create
genes <- c("TP53", "KRAS", "BRAF", "EGFR", "PIK3CA")
out.dir <- "pfam/"
dir.create(out.dir, showWarnings = FALSE)
library(jsonlite, quietly = TRUE)
for(hgnc.symbol in genes){
cat(gene, "\n")
pfam.info <- hgnc2pfam_local(uniprot.rds, hgnc.symbol, include.seq = FALSE)
output.json = toJSON(pfam.info, pretty = FALSE, auto_unbox = TRUE)
write(output.json, paste0(out.dir, "/", hugo.symbol, "_pfam.json"))
}
for(hgnc.symbol in genes){
cat(hgnc.symbol, "\n")
pfam.info <- hgnc2pfam_local(uniprot.rds, hgnc.symbol, include.seq = FALSE)
output.json = toJSON(pfam.info, pretty = FALSE, auto_unbox = TRUE)
write(output.json, paste0(out.dir, "/", hugo.symbol, "_pfam.json"))
}
for(hgnc.symbol in genes){
cat(hgnc.symbol, "\n")
pfam.info <- hgnc2pfam_local(uniprot.rds, hgnc.symbol, include.seq = FALSE)
output.json = toJSON(pfam.info, pretty = FALSE, auto_unbox = TRUE)
write(output.json, paste0(out.dir, "/", hgnc.symbol, "_pfam.json"))
}
